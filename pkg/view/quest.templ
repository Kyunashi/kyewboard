package view

import "kyewboard/pkg/db"
import "strconv"
import "kyewboard/pkg/util"

templ FullQuest() {
	<div>HI</div>
}

templ MiniQuest() {
}

templ QuestPage(quests []db.Quest) {
	<div id="content" class="container mx-auto mt-4">
		<div id="quests" class="container space-y-4">
			<h2 class="text-2xl justify-center font-bold">Quests</h2>
			for idx, quest:= range quests {
				@Quest(quest, idx)
			}
		</div>
	</div>
}

templ Quest(quest db.Quest, questidx int) {
	<div class="max-w-2xl mx-auto p-6 mt-8">
		<div class="w-full bg-blue-900 border border-[#daf6fc] bg-opacity-20 p-6 rounded-lg inline-block shadow-md">
			<h1 class="text-center text-4xl text-[#daf6fc]  font-morpheus font-bold mb-4">The Quest { strconv.Itoa(quest.Id) }</h1>
			<div class="w-full flex flex-row space-x-4 justify-evenly">
				<div class="w-2/3 container justify-evenly">
					<p class="text-left text-[#daf6fc] lock font-bold font-morpheus mb-2">Objectives:</p>
					for objidx := range quest.Objectives {
						@Objective(quest.Objectives[objidx], objidx, questidx)
					}
				</div>
				<div class="w-1/3 container justify-evenly">
					<p class="text-left  text-[#daf6fc] font-bold font-morpheus">Rewards:</p>
					for i := range quest.Rewards {
						@Reward(quest.Rewards[i])
					}
				</div>
			</div>
			<p class="text-left mb-2" id="status">Status: { quest.Status }</p>
			@CompleteDiv()
		</div>
	</div>
}

templ Reward(reward string) {
	<div class="flex justify-between w-full relative">
		<label class="w-full relative">{ reward }</label>
	</div>
}

templ Objective(objective db.Objective, objidx int, questidx int) {
	<div class="flex w-full relative">
		if objective.Done {
			@TaskLabelLT(objective.Text)
			<input
				id="taskcheckbox"
				name="taskcheckbox"
				type="checkbox"
				class="h-4 w-4 text-blue-600"
				hx-post="/toggletask"
				hx-swap="outerHTML"
				hx-include={ util.TasklblInputHash(questidx, objidx) }
				hx-trigger="change"
				hx-target="previous #tasklabel"
				checked
			/>
		} else {
			@TaskLabel(objective.Text)
			<input
				id="taskcheckbox"
				name="taskcheckbox"
				type="checkbox"
				class="h-4 w-4 text-blue-600"
				hx-post="/toggletask"
				hx-swap="outerHTML"
				hx-include={ util.TasklblInputHash(questidx, objidx) }
				hx-trigger="change"
				hx-target="previous #tasklabel"
			/>
		}
		<input type="hidden" id={ util.TasklblInput(questidx, objidx) } value={ objective.Text } name="tasklabel"/>
	</div>
}

templ TaskLabel(objective string) {
	<label id="tasklabel" class="flex-grow text-left">{ objective }</label>
}

templ TaskLabelLT(objective string) {
	<label id="tasklabel" class="flex-grow text-left line-through text-gray-500">{ objective }</label>
}

templ AcceptDiv() {
	<div class="flex w-full mt-4" id="hi">
		<button class="w-1/2 bg-green-200 hover:bg-green-300 text-black py-2" hx-post="/accepted" hx-trigger="click" hx-target="closest #hi" hx-swap="innerHTML">Accept</button>
		<button class="w-1/2 bg-red-200 hover:bg-red-300 text-black py-2" hx-post="/declined" hx-trigger="click" hx-target="previous #status" hx-swap="innerHTML">Decline</button>
	</div>
}

templ CompleteDiv() {
	<div class="flex w-full mt-4 justify-center">
		<button class="border border-blue-500 hover:bg-blue-700 py-2 px-4 w-1/2 justify-center rounded-lg" hx-post="/completed" hx-trigger="click" hx-target="#body">Complete Quest</button>
	</div>
}
