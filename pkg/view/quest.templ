package view

import (
	"kyewboard/pkg/models"
	"kyewboard/pkg/util"
	"strconv"
)

templ FullQuest() {
}

templ MiniQuest() {
}

templ QuestPage(quests []models.Quest) {
	<div id="content" class="container mx-auto mt-4">
		<div id="quests" class="container  space-y-4">
			for idx, quest:= range quests {
				@Quest(quest, idx)
			}
			@EditableQuest()
		</div>
	</div>
}

templ EditableQuest() {
	<div class="max-w-2xl mx-auto p-6 mt-8" id="editable-quest">
		<div class="w-full bg-blue-900 border border-[#daf6fc] bg-opacity-60 p-6 rounded-lg inline-block shadow-md">
			<div class="text-center mb-4 flex justify-center">
				<input
					id="editable-title"
					name="editableTitle"
					type="text"
					placeholder="TITLE"
					onfocus="this.placeholder = ''"
					class="text-4xl text-center text-[#daf6fc] font-morpheus bg-blue-900 bg-transparent font-bold border-none border-[#daf6fc] focus:outline-none"
				/>
			</div>
			<div class="w-full flex flex-row space-x-4 justify-evenly">
				<div class="w-2/3 container justify-evenly">
					<p class="text-left text-[#daf6fc] lock font-bold font-morpheus mb-2">Objectives:</p>
					@EditableObjective()
				</div>
				<div class="w-1/3 container justify-evenly">
					<p class="text-left  text-[#daf6fc] font-bold font-morpheus">Rewards:</p>
					@EditableReward()
				</div>
			</div>
			@AddQuestBtn()
			// ADD QUEST
			// DIFFICULTY
			// CATEGORY
		</div>
	</div>
}

templ Quest(quest models.Quest, questidx int) {
	<div class="max-w-2xl mx-auto p-6 mt-8 relative">
		<div class="w-full bg-blue-900 border border-[#daf6fc] p-6 bg-opacity-60 rounded-lg inline-block shadow-md">
			<div class="absolute top-2 right-2 flex space-x-2">
				<button class="text-[#daf6fc] hover:text-[#fffa]">
					<img src="/static/edit.png" alt="Edit" class="w-6 h-6"/>
				</button>
				<button class="text-[#daf6fc] hover:text-[#fffa]">
					<img src="/static/delete2.png" alt="Delete" class="w-6 h-6"/>
				</button>
			</div>
			<h1 class="text-center text-4xl text-[#daf6fc]  font-morpheus font-bold mb-4">{ quest.Message }</h1>
			<div class="w-full flex flex-row space-x-4 justify-evenly">
				<div class="w-2/3 container justify-evenly">
					<p class="text-left text-[#daf6fc] lock font-bold font-morpheus mb-2">Objectives:</p>
					for objidx := range quest.Objectives {
						@Objective(quest.Objectives[objidx], objidx, questidx)
					}
				</div>
				<div class="w-1/3 container justify-evenly">
					<p class="text-left  text-[#daf6fc] font-bold font-morpheus">Rewards:</p>
					for i := range quest.Rewards {
						@Reward(quest.Rewards[i].Text)
					}
				</div>
			</div>
			<p class="text-left mb-2" id="status">Status: { quest.Status }</p>
			@CompleteDiv()
		</div>
	</div>
}

templ Reward(reward string) {
	<div class="flex justify-between w-full relative">
		<label class="w-full relative">{ reward }</label>
	</div>
}

templ EditableReward() {
	<div class="flex justify-between w-full relative">
		<input type="text" id="editable-reward" name="editableReward" placeholder="New Reward" onfocus="this.placeholder = ''" class="w-full bg-transparent border-none border-[#daf6fc] ] focus:outline-none"/>
	</div>
}

templ EditableObjective() {
	<div class="flex w-full relative">
		<input id="editable-objective" name="editableObjective" type="text" placeholder="New Objective" onfocus="this.placeholder = ''" class="w-full bg-transparent border-none border-[#daf6fc] ] focus:outline-none"/>
	</div>
}

templ Objective(objective models.Objective, objidx int, questidx int) {
	<div class="flex w-full relative">
		if objective.Done {
			@TaskLabelLT(objective.Text)
			<input
				id="taskcheckbox"
				name="taskcheckbox"
				type="checkbox"
				class="h-4 w-4 text-blue-600"
				hx-post="/toggletask"
				hx-swap="outerHTML"
				hx-include={ util.TasklblInputHash(questidx, objidx) }
				hx-trigger="change"
				hx-target="previous #tasklabel"
				checked
			/>
		} else {
			@TaskLabel(objective.Text)
			<input
				id="taskcheckbox"
				name="taskcheckbox"
				type="checkbox"
				class="h-4 w-4 text-blue-600"
				hx-post="/toggletask"
				hx-swap="outerHTML"
				hx-include={ util.TasklblInputHash(questidx, objidx) }
				hx-trigger="change"
				hx-target="previous #tasklabel"
			/>
		}
		<input type="hidden" id={ util.TasklblInput(questidx, objidx) } value={ strconv.Itoa(objective.ID) } name="tasklabel"/>
	</div>
}

templ TaskLabel(objective string) {
	<label id="tasklabel" class="flex-grow text-left">{ objective }</label>
}

templ TaskLabelLT(objective string) {
	<label id="tasklabel" class="flex-grow text-left line-through text-gray-500">{ objective }</label>
}

templ AddQuestBtn() {
	<div class="flex w-full mt-4 justify-center">
		<button
			class="border border-blue-500 hover:bg-blue-700 py-2 px-4 w-1/2 justify-center rounded-lg"
			hx-post="/addquest"
			hx-trigger="click"
			hx-include="#editable-objective, #editable-title, #editable-reward"
			hx-target="#content"
		>
			Add Quest
		</button>
	</div>
}

templ CompleteDiv() {
	<div class="flex w-full mt-4 justify-center">
		<button class="border border-blue-500 hover:bg-blue-700 py-2 px-4 w-1/2 justify-center rounded-lg" hx-post="/completed" hx-trigger="click" hx-target="#content">Complete Quest</button>
	</div>
}

templ EditBtn() {
	<button class="text-[#daf6fc] hover:text-[#a1e0f5]" hx-get="/edit/{quest.ID}">
		<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 h-6">
			<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.232 5.232l3.536 3.536M9 11l3 3m4-6l2 2m2 6.828A2.996 2.996 0 0115.172 18H8.828A2.996 2.996 0 016 15.172V8.828A2.996 2.996 0 018.828 6h6.344A2.996 2.996 0 0118 8.828V12z"></path>
		</svg>
	</button>
}

templ DeleteBtn() {
	<button class="text-[#daf6fc] hover:text-[#a1e0f5]" hx-delete="/delete/{quest.ID}">
		<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 h-6">
			<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
		</svg>
	</button>
}
